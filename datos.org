#+TITLE:     Manejo de datos con R
#+SETUPFILE: config.org
#+OPTIONS: H:2
#+PROPERTY: header-args :results output :exports both :session R:datos :tangle yes :comments org
#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}[plain]\tableofcontents[currentsection,sectionstyle=show/shaded]\end{frame}}

* Lectura de datos
** =setwd=, =getwd=, =dir=
En =setwd= hay que especificar el directorio que contiene el repositorio.
#+begin_src R :exports code
getwd()
old <- setwd("~/github/intro")
dir()
#+end_src

#+begin_src R
dir(pattern='.R')
#+end_src

#+begin_src R
dir('data')
#+end_src

** Lectura de datos con =read.table= o =read.csv=

- Función Genérica
#+begin_src R
dats <- read.table('data/aranjuez.csv', sep=',', header=TRUE)

head(dats)
#+end_src

- Función específica
#+begin_src R
aranjuez <- read.csv('data/aranjuez.csv')

head(aranjuez)
#+end_src

#+begin_src R
class(aranjuez)
#+end_src

** Inspeccionamos el resultado
#+begin_src R
names(aranjuez)
#+end_src

#+begin_src R
head(aranjuez)
#+end_src

#+begin_src R
tail(aranjuez)
#+end_src

** Inspeccionamos el resultado
#+begin_src R
summary(aranjuez)
#+end_src

** Valores ausentes
- =NA= está definido como =logical=
#+begin_src R
class(NA)
#+end_src

- Operar con =NA= siempre produce un =NA=
#+begin_src R
1 + NA
#+end_src

- Esto es un "problema" al usar funciones
#+begin_src R
mean(aranjuez$Radiation)
#+end_src 

#+begin_src R
mean(aranjuez$Radiation, na.rm =  TRUE)
#+end_src
** Valores ausentes

Las funciones =is.na= y =anyNA= los identifican 
#+begin_src R
anyNA(aranjuez)
#+end_src

#+begin_src R
which(is.na(aranjuez$Radiation))
#+end_src

#+begin_src R
sum(is.na(aranjuez$Radiation))
#+end_src
** Fechas

#+begin_src R
names(aranjuez)[1] <- "Date"

aranjuez$Date <- as.Date(aranjuez$Date)
#+end_src

#+begin_src R
class(aranjuez$Date)

summary(aranjuez$Date)
#+end_src

** Fechas
- Podemos extraer información de un objeto =Date= con la función =format=[fn:1]:
#+begin_src R
aranjuez$month <- as.numeric(
    format(aranjuez$Date, '%m'))

aranjuez$year <- as.numeric(
    format(aranjuez$Date, '%Y'))

aranjuez$day <- as.numeric(
    format(aranjuez$Date, '%j'))
#+end_src

#+begin_src R
summary(aranjuez[, c("Date", "month", "year", "day")])
#+end_src

* Indexado

** Indexado con =[]=
- Filas
#+begin_src R
aranjuez[1:5,]
#+end_src
- Filas y Columnas
#+begin_src R
aranjuez[10:14, 1:5]
#+end_src

** Indexado con =[]=
- Condición basada en los datos
#+begin_src R
idx <- with(aranjuez, Radiation > 20 & TempAvg < 10) 

head(aranjuez[idx, ])
#+end_src

** =subset=
#+begin_src R
subset(aranjuez,
       subset = (Radiation > 20 & TempAvg < 10),
       select = c(Radiation, TempAvg,
           TempMax, TempMin))
#+end_src

** Ejercicio

*** Valores en las estaciones
Extrae dos subconjuntos de datos, uno correspondiente al invierno y otro correspondiente al verano, incluyendo las variables de radiación y temperatura media, fecha y mes. 

Con estos dos =data.frame= obtén uno conjunto, diferenciando la estación de cada registro.

Puedes suponer que el invierno comenzó el 22 de diciembre y terminó el 20 de marzo, y el verano comenzó el 21 de junio y terminó el 23 de septiembre.


** Solución
#+begin_src R :tangle no
invierno <- subset(aranjuez,
                   select = c(Date, day, month, 
                              Radiation, TempAvg),
                   subset = day < 79 | day > 357)
#+end_src

#+begin_src R :tangle no
verano <- subset(aranjuez,
                 select = c(Date, day, month,
                            Radiation, TempAvg),
                   subset = day > 173 & day < 267)
#+end_src

#+begin_src R :tangle no
invierno$id <- "Invierno"
verano$id <- "Verano"

aranjuez2 <- rbind(invierno, verano)
#+end_src


* Datos agregados

** =aggregate=
#+begin_src R
aranjuez$rainy <- aranjuez$Rain > 0

aggregate(Radiation ~ rainy, data = aranjuez,
          FUN = mean)
#+end_src

** Variable categórica con =cut=
#+begin_src R
aranjuez$tempClass <- cut(aranjuez$TempAvg, 5)

aggregate(Radiation ~ tempClass, data = aranjuez,
          FUN = mean)
#+end_src

#+begin_src R
aggregate(Radiation ~ tempClass + rainy,
          data = aranjuez, FUN = mean)
#+end_src

** Agregamos varias variables

#+begin_src R
aggregate(cbind(Radiation, TempAvg) ~ tempClass,
          data = aranjuez, FUN = mean)
#+end_src

#+begin_src R
aggregate(cbind(Radiation, TempAvg) ~ tempClass + rainy,
          data = aranjuez, FUN = mean)
#+end_src


** Ejercicio

*** Valores en las estaciones
A partir del =data.frame= que incluía los datos de invierno y verano, calcula:

- La *mediana* de las variables de radiación y temperatura por estación.
- La *desviación estándar* relativa a la media de las variables de radiación y temperatura por estación.

A partir del =data.frame= completo calcula la *media* interanual diaria de las variables de radiación y temperatura.

** Solución
#+begin_src R :exports code :tangle no
## Mediana
aggregate(cbind(Radiation, TempAvg) ~ id,
          data = aranjuez2,
          FUN = median)

## Desviación estándar relativa
sdr <- function(x) sd(x) / mean(x)

aggregate(cbind(Radiation, TempAvg) ~ id,
          data = aranjuez2,
          FUN = sdr)

## Media interanual
aggregate(cbind(Radiation, TempAvg) ~ day,
          data = aranjuez,
          FUN = mean)
#+end_src

* Unión de =data.frame=
** Con =merge=
- Primero construimos un =data.frame= de ejemplo
#+begin_src R 
USStates <- as.data.frame(state.x77)
USStates$Name <- rownames(USStates)
rownames(USStates) <- NULL
#+end_src
- Lo partimos en estados "fríos" y estados "grandes"
#+begin_src R 
coldStates <- USStates[USStates$Frost>150,
                       c('Name', 'Frost')]
largeStates <- USStates[USStates$Area>1e5,
                        c('Name', 'Area')]
#+end_src
** Con =merge=
- Unimos los dos conjuntos (estados "fríos" y "grandes")
#+begin_src R 
merge(coldStates, largeStates)
#+end_src

** =merge= usa =match=
- Estados grandes que también son fríos
#+begin_src R 
idxLarge <- match(largeStates$Name,
                  coldStates$Name,
                  nomatch=0)
idxLarge
#+end_src  
#+begin_src R
coldStates[idxLarge,]
#+end_src
** =merge= usa =match=
- Estados frios que también son grandes
#+begin_src R 
idxCold <- match(coldStates$Name,
                 largeStates$Name,
                 nomatch=0)
idxCold
#+end_src  

#+begin_src R
largeStates[idxCold,]
#+end_src

* Cambio de formato
** Forma simple con =stack= 
#+begin_src R
aranjuezWide <- aranjuez[, c('Date', 'Radiation',
                             'TempAvg', 'TempMax',
                             'WindAvg', 'WindMax')]
#+end_src
- Pasamos de formato =wide= a =long=
#+begin_src R 
aranjuezLong <- stack(aranjuezWide)

head(aranjuezLong)
#+end_src

#+begin_src R
summary(aranjuezLong)
#+end_src

** Más flexible con =reshape2=
- =reshape2= es un paquete que puede facilitar la transformación de =data.frame= y matrices.

#+begin_src R
library(reshape2)
#+end_src

** =melt= para cambiar de /wide/ a /long/
#+begin_src R
aranjuezLong2 <- melt(aranjuezWide, id.vars = 'Date',
                      variable.name = 'Variable',
                      value.name = 'Value')

head(aranjuezLong2)
#+end_src

** Agregamos a partir de un formato =long=

#+begin_src R
aggregate(Value ~ Variable, data = aranjuezLong2,
          FUN = mean)
#+end_src

** =dcast= para cambiar de /long/ a /wide/
#+begin_src R
aranjuezWide2 <- dcast(aranjuezLong2,
                       Variable ~ Date)
head(aranjuezWide2[, 1:10])
#+end_src


* Footnotes

[fn:1]Más información en =help(format.Date)= y =help(strptime)=. 
