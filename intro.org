#+TITLE:     Introducción a R
#+STARTUP: indent
#+SETUPFILE: config.org
#+OPTIONS: H:3
#+PROPERTY: header-args :results output :exports both :session R:intro :tangle yes :comments org

* Introducción

** ¿Qué es R?
*** ¿Qué es =R=?						    
Es un entorno de programación orientado al cálculo, manipulación de datos, y representación gráfica, publicado como software libre con licencia GNU-GPL.
#+BEGIN_CENTER
 [[http://www.R-project.org]] 
#+END_CENTER

*** R está muy bien documentado
- [[http://cran.r-project.org/manuals.html][Manuales Oficiales]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-intro.html][Introduction to R]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-data.html][R Data Import/Export]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-admin.html][R Installation and Administration]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html][Writing R Extensions]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-lang.html][R language definition]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-ints.html][R Internals]]

- [[http://cran.r-project.org/other-docs.html][Manuales externos]]

*** Otros recursos de información

- [[http://www.r-project.org/mail.html][Listas de correo]] (sin olvidar respetar [[http://www.r-project.org/posting-guide.html][estos consejos]])
  - Generales: R-announce, R-help, R-devel
  - Special Interest Group (SIG) mailing lists
- [[http://www.r-bloggers.com][R-bloggers]]
- [[http://stackoverflow.com/questions/tagged/r][stackoverflow]]

*** R es un proyecto colaborativo
- Una de las grandes riquezas de R es la cantidad de paquetes que amplían sus funcionalidades.  
- La lista completa está en http://cran.es.r-project.org/web/packages/.
- Las CRAN Task Views agrupan por temáticas:
  [[http://cran.r-project.org/web/views/]]


* Ejemplo

*** Lectura de datos
Importamos datos en formato tabular de un fichero disponible en un [[https://raw.githubusercontent.com/oscarperpinan/R/master/data/aranjuez.csv][enlace externo]]. 
#+begin_src R
myURL <- "https://raw.githubusercontent.com/oscarperpinan/R/master/data/aranjuez.csv"

## Las columnas están separadas por comas
## La primera fila es la cabecera
datos <- read.table(myURL,
                    sep=',',
                    header=TRUE)
#+end_src

#+RESULTS:

*** Accedemos al contenido

#+begin_src R
summary(datos)
#+end_src

*** Modificamos los datos
#+begin_src R
## Convertimos unidades (MJ -> kWh)
datos$Radiation2 <- datos$Radiation / 3.6
#+end_src

#+begin_src R
## 10 primeras filas de las dos variables
datos[1:10,
      c("Radiation", "Radiation2")]
#+end_src

*** Representamos gráficamente los datos
#+begin_src R :file figs/intro.pdf :results graphics file :export results 
library(lattice)

xyplot(Radiation ~ TempAvg, data = datos,
       type = c("p", "r"),
       pch = 21, col = 'black', fill = 'gray')
#+end_src

#+ATTR_LATEX: :height 0.6\textheight
#+RESULTS:
[[file:figs/intro.pdf]]

* Objetos en R

*** Objetos en R

- Existen varios objetos en R:
  - Vectores
  - Listas
  - Funciones
  - ...
- A partir de estos objetos se definen varias clases:
  - =matrix=
  - =data.frame=
  - =factor=
  - =Date=, =POSIXct=
  - ...

** Vectores

*** Primeros pasos
#+begin_src R 
x <- 1:5
x
#+end_src
#+begin_src R
length(x)
#+end_src
#+begin_src R
class(x)
#+end_src


*** Generar vectores con =seq=
#+begin_src R 
x1 <- seq(1, 100, by=2)
x1
#+end_src

#+begin_src R
seq(1, 100, length=10)
#+end_src


*** Unir vectores con =c=
#+begin_src R
x <- c(1, 2, 3)
x
#+end_src

#+begin_src R 
x <- seq(1, 100, length=10)
y <- seq(2, 100, length=50)
z <- c(x, y)
z
#+end_src


*** Operaciones sencillas con vectores
#+begin_src R 
  x <- 1:5
  x + 1
#+end_src

#+begin_src R
  x^2
#+end_src

#+begin_src R
  y <- 1:10
  x + y
#+end_src

#+begin_src R
  x * y
#+end_src

#+begin_src R
  x^2 + y^3
#+end_src




*** Ejercicio

***** Dibuja una circunferencia

Sabiendo que la función =plot(x, y)= dibuja el vector =y= frente al
vector =x=, ¿qué código es necesario para dibujar una circunferencia
de un radio determinado?


** Matrices
*** Construir una matriz
#+begin_src R 
  z <- 1:12
  M  <-  matrix(z, nrow=3)
  M
#+end_src

#+begin_src R
  class(M)
#+end_src

#+begin_src R
  dim(M)
#+end_src

#+begin_src R
  summary(M)
#+end_src

*** Matrices a partir de vectores: =rbind= y =cbind=
#+begin_src R 
z <- y <- x <- 1:10

M <- cbind(x, y, z)
M
#+end_src

#+begin_src R
M <- rbind(x, y, z)
M
#+end_src

*** Álgebra matricial

- =t()= :: Transpuesta de una matriz
- =*= :: Multiplicación elemento a elemento
- =%*%= :: Multiplicación de matrices
- =solve(A)= :: Inversa de una matriz (cuadrada)
- ...
 
** Listas
*** Para crear una lista usamos la función =list=
#+begin_src R 
lista <- list(a=c(1,3,5),
              b=c('l', 'p', 'r', 's'),
              c=3)
lista
#+end_src

#+begin_src R
class(lista)
#+end_src

#+begin_src R
length(lista)
#+end_src



** Data.frame
*** Para crear un =data.frame=...
#+begin_src R 
  df <- data.frame(x = 1:5,
                   y = rnorm(10),
                   z = 0)
  df
#+end_src

#+begin_src R
  length(df)
#+end_src

#+begin_src R
  dim(df)
#+end_src

*** A partir de ficheros
#+begin_src R
dats <- read.table('data/aranjuez.csv',
                   sep=',',
                   header=TRUE)
#+end_src

#+begin_src R
head(dats)
#+end_src

*Atención: usa =setwd= para configurar ruta*

*** A partir de ficheros remotos
#+begin_src R
remoto <- read.table('https://raw.githubusercontent.com/oscarperpinan/R/master/data/aranjuez.csv',
                     sep=',',
                     header=TRUE)
#+end_src

#+begin_src R
head(remoto)
#+end_src

#+begin_src R
identical(dats, remoto)
#+end_src


*** Ejercicio

***** Dibuja una circunferencia

¿Qué código hay que emplear para dibujar una circunferencia de forma
que todos los vectores implicados sean columnas de un =data.frame=?


* Indexado

** Condiciones lógicas
*** Condiciones simples
#+begin_src R
x <- seq(-1, 1, .1)
x
#+end_src

#+begin_src R
x < 0
#+end_src

#+begin_src R
x >= 0
#+end_src

#+begin_src R
x == 0
#+end_src

#+begin_src R
x != 0
#+end_src

*** Condiciones múltiples

#+begin_src R 
cond  <-  (x > 0) & (x < .5)
cond
#+end_src

#+begin_src R
cond  <-  (x >= .5) | (x <= -.5)
cond
#+end_src


*** Con las condiciones se pueden hacer operaciones
#+begin_src R 
sum(cond)
#+end_src

#+begin_src R
sum(!cond)
#+end_src

#+begin_src R
as.numeric(cond)
#+end_src


** Vectores
*** Indexado numérico

#+begin_src R 
  x <- seq(1, 100, 2)
  x
#+end_src

#+begin_src R
  x[1:5]
#+end_src

#+begin_src R
  x[10:5]
#+end_src

*** Indexado con condiciones lógicas

#+begin_src R
  x[x != 9]
#+end_src

#+begin_src R
  x[x > 20]
#+end_src
     
#+begin_src R
x[x %in% seq(0, 10, .5)]
#+end_src

*** Indexado con condiciones múltiples

#+begin_src R 
z <- seq(-10, 10, by = .5)
z
#+end_src

#+begin_src R
z[z < -5 | z > 5]
#+end_src

#+begin_src R
cond <- (z >= 0 & z <= 5)
cond
#+end_src

#+begin_src R
z[cond]
#+end_src

** Matrices
*** Indexado de matrices
#+begin_src R
M[1:2, ]
#+end_src

#+begin_src R
M[1:2, 2:3]
#+end_src

#+begin_src R
M[1, c(1, 4)]
#+end_src

*** Indexado de matrices
#+begin_src R
M[-1,]
#+end_src

#+begin_src R
M[-c(1, 2),]
#+end_src

** Listas
*** Podemos acceder a los elementos...
- Por su nombre
#+begin_src R
lista$a
#+end_src

- o por su índice
#+begin_src R 
  lista[1]
#+end_src

#+begin_src R
  lista[[1]]
#+end_src


** Data Frame
*** Podemos acceder a los elementos
#+begin_src R 
  df <- data.frame(x = 1:5,
                   y = rnorm(10),
                   z = 0)
#+end_src

- Por su nombre (como una lista)
#+begin_src R 
df$x
#+end_src

- Por su índice (como una matriz)
#+begin_src R 
df[1,]
#+end_src

#+begin_src R
df[,1]
#+end_src
*** Indexado lógico
- Hay que explicitar dos veces el =data.frame=:
#+begin_src R
df[df$y > 0,]
#+end_src
- La función =subset= simplifica el código:
#+begin_src R
subset(df, y > 0)
#+end_src
*** Uso de =with= 
- Problema: el código con varias variables puede ser ilegible
#+begin_src R :eval no :exports no
df$x^2 + df$y^2
#+end_src
- La función =with= permite acceder a varias variables con una única llamada:
#+begin_src R
with(df, x^2 + y^2)
#+end_src

#+begin_src R
with(df, x[y > 0])
#+end_src

* Funciones
** Definición de funciones
*** Componentes de una función
- Una función se define con =function=
#+BEGIN_CENTER
=name <- function(arg_1, arg_2, ...) expression=
#+END_CENTER
- Está compuesta por:
  - Nombre de la función (=name=)
  - Argumentos (=arg_1=, =arg_2=, =...=)
  - Cuerpo (=expression=): emplea los argumentos para generar un resultado


*** Argumentos: nombre y orden

Una función identifica sus argumentos por su nombre y por su orden (sin nombre)

#+begin_src R 
eleva <- function(x, p)
{
    x ^ p
}
#+end_src

#+begin_src R 
eleva(x = 1:10, p = 2)
#+end_src

#+begin_src R 
eleva(1:10, p = 2)
#+end_src

#+begin_src R 
eleva(p = 2, x = 1:10)
#+end_src

*** Argumentos: valores por defecto
- Se puede asignar un valor por defecto a los argumentos
#+begin_src R 
eleva <- function(x, p = 2)
{
    x ^ p
}
#+end_src
#+begin_src R 
eleva(1:10)
#+end_src
#+begin_src R 
eleva(1:10, 2)
#+end_src

*** Argumentos sin nombre: =...=
#+begin_src R 
pwrSum <- function(x, p, ...)
{
    sum(x ^ p, ...)
}
#+end_src
#+begin_src R 
x <- 1:10
pwrSum(x, 2)
#+end_src
#+begin_src R 
x <- c(1:5, NA, 6:9, NA, 10)
pwrSum(x, 2)
#+end_src
#+begin_src R 
pwrSum(x, 2, na.rm=TRUE)
#+end_src

*** Podemos construir a partir de funciones
#+begin_src R 
foo  <-  function(x, ...){
  mx <- mean(x, ...)
  medx <- median(x, ...)
  sdx <- sd(x, ...)
  c(mx, medx, sdx)
  }
#+end_src

#+begin_src R 
foo(1:10)
#+end_src

#+begin_src R
foo(rnorm(1e5))
#+end_src

*** Ejercicio

***** Dibuja una circunferencia

Define una función de dos argumentos, =theta= (vector de ángulos) y
=r= (radio), que entregue un =data.frame= de dos columnas, =x= e =y=,
con las coordenadas del arco de circunferencia que corresponde a los
argumentos de la función, y emplea esta función para dibujar una
circunferencia completa.


** Funciones predefinidas

*** Funciones en paquetes

- =R= proporciona un amplio conjunto de funciones predefinidas agrupadas en paquetes

  - Algunos paquetes vienen instalados y se cargan al empezar (/base/):
#+begin_src R :eval no
  sessionInfo()
#+end_src
  - Otros vienen instalados pero hay que cargarlos (/recommended/):
#+begin_src R :eval no 
  library(lattice)

  packageDescription('lattice')
#+end_src
  - Otros hay que instalarlos y después cargarlos (/contributed/):
#+begin_src R :eval no :exports no
  install.packages('data.table')
#+end_src

#+begin_src R :eval no :exports no
  library('data.table')
  packageDescription('data.table')
#+end_src

* Bucles
** Matrices
*** La función =apply=
#+begin_src R 
apply(M, 1, sum)
#+end_src

#+begin_src R
rowSums(M)
#+end_src

#+begin_src R
apply(M, 2, mean)
#+end_src

#+begin_src R
colMeans(M)
#+end_src

** Listas / =data.frame=
*** =lapply= y =sapply=
#+begin_src R
lista <- list(x = 1:10,
              y = seq(0, 10, 2),
              z = rnorm(30))
lapply(lista, sum)
#+end_src

#+begin_src R
sapply(lista, sum)
#+end_src

*** Ejercicio

**** 
- Calcula la media de cada una de las columnas de =remoto=.
- Calcula la media, mediana y desviación estándar de cada una de las columnas de =remoto=.
- Calcula la media de los valores positivos de cada una de las columnas de =remoto=.

**** 
#+begin_src R
remoto <- read.csv('https://raw.githubusercontent.com/oscarperpinan/R/master/data/aranjuez.csv')
#+end_src


** Bucles =for=
*** =for=
- En =R= suele usarse más la familia de funciones =*apply= con funciones vectorizadas.
- No obstante, =for= puede tener su utilidad:
#+begin_src R
for(n in c(2,5,10,20,50)) {
    x <- rnorm(n)
    cat(n,":", sum(x^2),"\n")
}
#+end_src
** Condiciones con =if=, =else= e =ifelse=
*** =if=
- En =R= suele usarse más el indexado lógico (vectorizado).
- ¿Cuál es el equivalente a este bucle for-if?
#+begin_src R 
  x <- rnorm(10)
  x2 <- numeric(length(x))
  for (i in seq_along(x2)){
      if (x[i]<0) x2[i] <- 0 else x2[i] <- 1
      }
  cbind(x, x2)
#+end_src
*** =ifelse=

#+begin_src R 
x <- rnorm(10)
x
#+end_src
#+begin_src R
ifelse(x>0, 1, 0)
#+end_src


